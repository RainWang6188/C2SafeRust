; ModuleID = 'uaf.c'
source_filename = "uaf.c"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-pc-linux-gnu"

%struct.A = type { void (i8*)*, i8* }
%struct.B = type { i32, i32 }

@.str = private unnamed_addr constant [19 x i8] c"In vuln function!\0A\00", align 1

; Function Attrs: noinline nounwind optnone uwtable
define dso_local void @vuln() #0 {
entry:
  %call = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([19 x i8], [19 x i8]* @.str, i64 0, i64 0))
  ret void
}

declare dso_local i32 @printf(i8*, ...) #1

; Function Attrs: noinline nounwind optnone uwtable
define dso_local i32 @main() #0 {
entry:
  %retval = alloca i32, align 4
  %a = alloca %struct.A*, align 8
  %b = alloca %struct.B*, align 8
  store i32 0, i32* %retval, align 4
  %call = call noalias i8* @malloc(i64 16) #3
  %0 = bitcast i8* %call to %struct.A*
  store %struct.A* %0, %struct.A** %a, align 8
  %1 = load %struct.A*, %struct.A** %a, align 8
  %2 = bitcast %struct.A* %1 to i8*
  call void @free(i8* %2) #3
  %call1 = call noalias i8* @malloc(i64 8) #3
  %3 = bitcast i8* %call1 to %struct.B*
  store %struct.B* %3, %struct.B** %b, align 8
  %4 = load %struct.B*, %struct.B** %b, align 8
  %B1 = getelementptr inbounds %struct.B, %struct.B* %4, i32 0, i32 0
  store i32 ptrtoint (void ()* @vuln to i32), i32* %B1, align 4
  %5 = load %struct.A*, %struct.A** %a, align 8
  %fnptr = getelementptr inbounds %struct.A, %struct.A* %5, i32 0, i32 0
  %6 = load void (i8*)*, void (i8*)** %fnptr, align 8
  %7 = load %struct.A*, %struct.A** %a, align 8
  %buf = getelementptr inbounds %struct.A, %struct.A* %7, i32 0, i32 1
  %8 = load i8*, i8** %buf, align 8
  call void %6(i8* %8)
  ret i32 0
}

; Function Attrs: nounwind
declare dso_local noalias i8* @malloc(i64) #2

; Function Attrs: nounwind
declare dso_local void @free(i8*) #2

attributes #0 = { noinline nounwind optnone uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { nounwind }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"Ubuntu clang version 11.1.0-++20210428103915+1fdec59bffc1-1~exp1~20210428204556.164"}
